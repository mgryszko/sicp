(define (f-rec n)
  (cond ((= n 0) n)
	((= n 1) n)
	((= n 2) n)
	(else (+ (f-rec (- n 1)) 
		 (* 2 (f-rec (- n 2))) 
		 (* 3 (f-rec (- n 3)))))))
(f-rec 0)
(f-rec 1)
(f-rec 2)
(f-rec 3)
(f-rec 4)
(f-rec 5)

(define (f-iter n)
  (define (f f-i-1 f-i-2 f-i-3 i)    
    (define f-i (+ f-i-1 (* 2 f-i-2) (* 3 f-i-3)))
    (if (>= i n)
	f-i
	(f f-i f-i-1 f-i-2 (+ i 1))))
  (if (< n 3)
      n
      (f 2 1 0 3)))

(f-iter 0)
(f-iter 1)
(f-iter 2)
(f-iter 3)
(f-iter 4)
(f-iter 5)
